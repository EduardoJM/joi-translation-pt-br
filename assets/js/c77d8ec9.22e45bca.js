"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[18],{5366:function(e,r,a){a.r(r),a.d(r,{frontMatter:function(){return i},contentTitle:function(){return m},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var s=a(7462),n=a(3366),o=(a(7294),a(3905)),t=["components"],i={},m="Celebrate Middleware Customizado",l={unversionedId:"usage-examples/celebrate-custom",id:"usage-examples/celebrate-custom",isDocsHomePage:!1,title:"Celebrate Middleware Customizado",description:"\xc9 poss\xedvel customizar a resposta do middleware celebrate para termos as mensagens de resposta de acordo com o que queremos. Para isso, precisamos criar um novo m\xe9todo errors() que fa\xe7a a mesma fun\xe7\xe3o que o original. Esse c\xf3digo foi baseado no original, dispon\xedvel no GitHub. Uma vers\xe3o pronta/funcional desse exemplo pode ser consultada em examples/celebratecustom.",source:"@site/docs/usage-examples/celebrate-custom.md",sourceDirName:"usage-examples",slug:"/usage-examples/celebrate-custom",permalink:"/joi-translation-pt-br/docs/usage-examples/celebrate-custom",editUrl:"https://github.com/EduardoJM/joi-translation-pt-br/edit/main/website/docs/usage-examples/celebrate-custom.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Celebrate Middleware",permalink:"/joi-translation-pt-br/docs/usage-examples/celebrate"}},d=[{value:"Introdu\xe7\xe3o",id:"introdu\xe7\xe3o",children:[]},{value:"Criando o middleware",id:"criando-o-middleware",children:[]},{value:"Utilizando o middleware",id:"utilizando-o-middleware",children:[]}],u={toc:d};function p(e){var r=e.components,a=(0,n.Z)(e,t);return(0,o.kt)("wrapper",(0,s.Z)({},u,a,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"celebrate-middleware-customizado"},"Celebrate Middleware Customizado"),(0,o.kt)("p",null,"\xc9 poss\xedvel customizar a resposta do middleware celebrate para termos as mensagens de resposta de acordo com o que queremos. Para isso, precisamos criar um novo m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"errors()")," que fa\xe7a a mesma fun\xe7\xe3o que o original. Esse c\xf3digo foi baseado no original, dispon\xedvel no ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/arb/celebrate/blob/master/lib/celebrate.js#L180"},"GitHub"),". Uma vers\xe3o pronta/funcional desse exemplo pode ser consultada em ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/EduardoJM/joi-translation-pt-br/tree/main/examples/celebrate_custom"},"examples/celebrate_custom"),"."),(0,o.kt)("h2",{id:"introdu\xe7\xe3o"},"Introdu\xe7\xe3o"),(0,o.kt)("p",null,"Primeiro, se estiver usando ",(0,o.kt)("strong",{parentName:"p"},"TypeScript")," \xe9 importante adicionar o seguinte item dentro das configura\xe7\xf5es de compila\xe7\xe3o do arquivo ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    //...\n    "compilerOptions": {\n        //...\n        "downlevelIteration": true,\n        //...\n    }\n    //...\n}\n')),(0,o.kt)("p",null,"Isso \xe9 apenas para o formato de itera\xe7\xe3o que utilizamos aqui (o mesmo do c\xf3digo original do celebrate). Voc\xea \xe9 livre para fazer isso de outra forma e, inclusive, caso queira, modificar essa documenta\xe7\xe3o de forma a melhorar essa quest\xe3o."),(0,o.kt)("h2",{id:"criando-o-middleware"},"Criando o middleware"),(0,o.kt)("p",null,"Vamos criar um middleware que substitua o nome dos campos das mensagens por nomes mais reais e humanos, por exemplo: troque ",(0,o.kt)("inlineCode",{parentName:"p"},'"email"')," por ",(0,o.kt)("inlineCode",{parentName:"p"},"endere\xe7o de e-mail"),". Assim, criamos uma fun\xe7\xe3o ",(0,o.kt)("inlineCode",{parentName:"p"},"customErrors")," que faz isso:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import express, { Request, Response, NextFunction } from 'express';\nimport { celebrate, Joi, isCelebrateError } from 'celebrate';\nimport { messages } from '../../src';\n\nfunction customErrors() {\n    const fieldNames: { [key: string]: string; } = {\n        email: 'endere\xe7o de e-mail',\n        password: 'o campo de senha'\n    };\n\n    function replaceFieldNames(message: string) {\n        const keys = Object.keys(fieldNames);\n        let msg = message;\n        keys.forEach((k) => {\n            const regex = new RegExp(`\\\"${k}\\\"`, 'gi');\n            msg = msg.replace(regex, String(fieldNames[k]));\n        });\n        return msg;\n    }\n\n    // middleware aqui\n}\n")),(0,o.kt)("p",null,"Perceba que a fun\xe7\xe3o acima n\xe3o apresenta, j\xe1, o middleware. Apenas uma mensagem de onde ele estar\xe1 localizado. Isso foi intencional para que voc\xeas percebam que, de fato, o middleware \xe9 bem pequeno:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"return (error: any, req: Request, res: Response, next: NextFunction) => {\n    if (!isCelebrateError(error)) {\n        return next(error);\n    }\n    // is a celebrate error\n    const result: {\n        error: 'VALIDATION_ERROR',\n        messages: string[],\n    } = {\n        error: 'VALIDATION_ERROR',\n        messages: [],\n    };\n    for (const [segment, joiError] of error.details.entries()) {\n        result.messages = joiError.details.map((err) => {\n            return replaceFieldNames(err.message);\n        });\n    }\n    return res.status(400).json(result);\n};\n")),(0,o.kt)("p",null,"O c\xf3digo acima deve ser juntado ao anterior:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import express, { Request, Response, NextFunction } from 'express';\nimport { celebrate, Joi, isCelebrateError } from 'celebrate';\nimport { messages } from '../../src';\n\nfunction customErrors() {\n    const fieldNames: { [key: string]: string; } = {\n        email: 'endere\xe7o de e-mail',\n        password: 'o campo de senha'\n    };\n\n    function replaceFieldNames(message: string) {\n        const keys = Object.keys(fieldNames);\n        let msg = message;\n        keys.forEach((k) => {\n            const regex = new RegExp(`\\\"${k}\\\"`, 'gi');\n            msg = msg.replace(regex, String(fieldNames[k]));\n        });\n        return msg;\n    }\n\n    return (error: any, req: Request, res: Response, next: NextFunction) => {\n        if (!isCelebrateError(error)) {\n            return next(error);\n        }\n        // is a celebrate error\n        const result: {\n            error: 'VALIDATION_ERROR',\n            messages: string[],\n        } = {\n            error: 'VALIDATION_ERROR',\n            messages: [],\n        };\n        for (const [segment, joiError] of error.details.entries()) {\n            result.messages = joiError.details.map((err) => {\n                return replaceFieldNames(err.message);\n            });\n        }\n        return res.status(400).json(result);\n    };\n}\n")),(0,o.kt)("h2",{id:"utilizando-o-middleware"},"Utilizando o middleware"),(0,o.kt)("p",null,"Agora, basta substituirmos o middleware no app express:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const ExampleValidation = celebrate({\n    body: Joi.object().keys({\n        email: Joi.string().required().email(),\n        password: Joi.string().required(),\n    }),\n}, {\n    abortEarly: false,\n    messages: messages,\n});\n\nconst app = express();\napp.use(express.json());\n\napp.post('/test', ExampleValidation, (req, res) => {\n    res.json();\n});\n\napp.use(customErrors());\napp.listen(3333);\n")))}p.isMDXComponent=!0}}]);